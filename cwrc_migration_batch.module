<?php

/**
 * @file
 * Implementing various drush scripts and forms to migrate orlando objects to
 * CWRC objects and ingests them into fedora.
 */

/**
 * Implements hook_permission().
 */
function cwrc_migration_batch_permission() {
  return array(
    'run batch migration' => array(
      'title' => t('Run batch migrations'),
      'description' => t('Run various batch migrations.'),
    ),
  );
}

/**
 * Implements hook_islandora_importer().
 */
function cwrc_migration_batch_islandora_importer() {
  return array(
    'cwrc_zip_importer' => array(
      'title' => t('CWRC Importer'),
      'class' => 'CwrcZipBatchImporter',
    ),
  );
}

/**
 * Implements hook_form_alter().
 */
function cwrc_migration_batch_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id === 'islandora_importer_form' && isset($form_state['storage']['importer']['class']) && $form_state['storage']['importer']['class'] === 'CwrcZipBatchImporter') {
    $values = !empty($form_state['values']) ? $form_state['values'] : array();
    $parameters = !empty($values['parameters']) ? $values['parameters'] : array();
    $cm_options = $form['fs']['parameters']['content_model']['#options'];
    $cwrc_entity_states = array();
    if (isset($cm_options['cwrc:person-entityCModel'])) {
      $cwrc_entity_states['invisible'][':input[name="parameters[content_model]"]'] = array('!value' => 'cwrc:person-entityCModel');
    }
    if (isset($cm_options['cwrc:place-entityCModel'])) {
      $cwrc_entity_states['invisible'][':input[name="parameters[content_model]"]'] = array('!value' => 'cwrc:place-entityCModel');
    }

    $form['fs']['parameters']['cmodel_dependents'] = array(
      '#type' => 'container',
      '#prefix' => '<div id="cwrc-migration-batch--cmodel-dependents-wrapper">',
      '#suffx' => '</div>',
      '#weight' => 3,
    );
    // XSL TRANSFORM.
    $cmodel_pid = !empty($parameters['content_model']) ? $parameters['content_model'] : '';
    $has_entity = !empty($cwrc_entity_states);
    $transform_options = $has_entity ? CwrcZipBatchImporter::getXmlTransformOptions($cmodel_pid) : array();
    $form['fs']['parameters']['cmodel_dependents']['xsl_transform_dc'] = array(
      '#type' => 'select',
      '#title' => t('XSL Transform DC'),
      '#description' => t("An XSL transform for setting the Fedora object's Dublin Core metadata datastream."),
      '#options' => $transform_options,
      '#required' => !empty($transform_options),
      '#access' => $has_entity,
    );
    if ($has_entity) {
      $form['fs']['parameters']['cmodel_dependents']['xsl_transform_dc']['#states'] = $cwrc_entity_states;
    }

    $schema_object_condition = array(
      ':input[name="parameters[content_model]"]' => array('!value' => 'cwrc:documentCModel'),
    );
    $is_cwrc_doc_cmodel = $cmodel_pid === 'cwrc:documentCModel';
    $states_arr = array(
      'invisible' => $schema_object_condition,
      'required' => $schema_object_condition,
    );
    $form['fs']['parameters']['cmodel_dependents']['schema_object'] = array(
      '#type' => 'select',
      '#title' => t('Schema Object'),
      '#options' => $is_cwrc_doc_cmodel ? cwrc_migration_batch_get_schema_object_options() : array(),
      '#required' => $is_cwrc_doc_cmodel,
      '#access' => isset($cm_options['cwrc:documentCModel']),
      '#states' => $states_arr,
    );
    $transform_options = $is_cwrc_doc_cmodel ? CwrcZipBatchImporter::getXmlTransformModsOptions($cmodel_pid) : array();
    $form['fs']['parameters']['cmodel_dependents']['xsl_transform_mods'] = array(
      '#type' => 'select',
      '#title' => t('XSL Transform MODS'),
      '#description' => t("An XSL transform for setting the Fedora object's MODS Record datastream."),
      '#options' => $transform_options,
      '#required' => $is_cwrc_doc_cmodel,
      '#access' => isset($cm_options['cwrc:documentCModel']),
      '#states' => $states_arr,
    );

    $form['#submit'] = array('cwrc_migration_batch_islandora_importer_form_submit_override');
  }
}

function cwrc_migration_batch_islandora_importer_form_submit_override(array $form, array &$form_state) {
  module_load_include('inc', 'islandora', 'includes/utilities');

  $cmodel_ds_mapping = array(
    'cwrc:person-entityCModel' => 'PERSON',
    'cwrc:place-entityCModel' => 'PLACE',
    'cwrc:documentCModel' => 'CWRC',
  );
  $values = $form_state['values'];
  $cmodel_pid = $values['parameters']['content_model'];

  if (!isset($cmodel_ds_mapping[$cmodel_pid])) {
    drupal_set_message(t('Selected content model batch upload not supported at the moment.'), 'error');
    return;
  }
  module_load_include('inc', 'cwrc_migration_batch', 'includes/cwrc_migration_batch.form');

  $parameters = array();
  if ($cmodel_pid === 'cwrc:documentCModel') {
    $values['parameters']['xsl_transform_dc'] = '';
    $parameters['xslt_to_mods'] = $values['parameters']['xsl_transform_mods'];
    $parameters['xslt_mods_to_dc'] = libraries_get_path('islandora_cwrc_xslt_library') . '/xslt/mods_to_dc.xsl';
    $parameters['schema_object'] = $values['parameters']['schema_object'];
  }

  $parameters += array(
    'cmodel_pid' => $cmodel_pid,
    'collection_pid' => $form_state['storage']['parent_pid'],
    'main_ds_id' => $cmodel_ds_mapping[$cmodel_pid],
    'namespace' => $values['parameters']['namespace'],
    'xslt_to_dc' => $values['parameters']['xsl_transform_dc'],
  );
  $form_state['values']['options'] = $parameters;
  cwrc_migration_batch_ingest_generic_form_submit($form, $form_state);
}

function cwrc_migration_batch_get_schema_object_options() {
  global $user;

  module_load_include('inc', 'islandora_basic_collection', 'includes/utilities');
  $tuque = islandora_get_tuque_connection($user);
  $sparql_query = <<<EOQ
SELECT ?pid ?label
WHERE {
  ?pid <fedora-model:label> ?label ;
       <fedora-model:hasModel> <info:fedora/cwrc:schemaCModel>;
}
EOQ;
  $results = $tuque->repository->ri->sparqlQuery($sparql_query);
  $options = array();
  foreach ($results as $objects) {
    $options[$objects['pid']['value']] = t('@label (@pid)', array(
      '@label' => $objects['label']['value'],
      '@pid' => $objects['pid']['value'],
    ));
  }
  return $options;
}
